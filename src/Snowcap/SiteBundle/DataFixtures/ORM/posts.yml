post01:
  title: Some AIR
  slug: some-air
  body: |
    We just released a web & desktop application for managing hotel vouchers. Since hotels hotels are located far away in snowy peaks, the Internet connection isn't reliable enough, so
    we've built a desktop application which allows the hotels to continue working even if the connection fails. When the connection comes back, a full synchronization is done, up-to-dating other hotels around.
    Unfortunately we can't show you this work since it's an internal application, but wanted to share with you this first Snowcap's release, built with PHP, Symfony, and Adobe AIR.
  publishedAt: '2010-10-02 15:35:00'
  tags: [work]
post1:
  title: First Symfony project: Moving People
  slug: first-symfony-project-moving-people
  body: |
    Snowcap launched his first project under the [Symfony framework](http://www.symfony.com "Symfony Framework"): [Moving People](www.movingpeople.com "Moving People").
    It was a real pleasure for us to discover and work with this Framework, and surely will continue to do so!
    This corporate website, designed by [One Million Dollars](http://www.onemd.be "1MD"), runs with 5 languages and his content is completely managed by the client.
  publishedAt: '2010-11-15 09:00:12'
  tags: [php,work,symfony]
post2:
  title: Why we chose Frameworks
  slug: why-we-chose-frameworks
  body: |
    ## Context

    We've built many websites and web applications from scratch, upon CMS's & eCommerce platforms, and upon Frameworks.  
    We had CMS expert positions in big companies; we know them very well.  
    But now we took a decision.

    __We will try to only propose projects made through Frameworks.__

    ## Definitions

    Let's start with the basis to explain our decision:

    ### From scratch

    Applications made from scratch means that the devlopers starts with the core programming language, and build every single functionality home made

    ### CMS / eCommerce platforms

    Drupal, Magento, and many others offers a __complete environment ready to use__: a frontend website, a backend administration module, and often a huge set of working functionalities, like a blog, calendars, image galleries, ...

    ### Frameworks

    Definition from Wikipedia:

    > _"In computer programming, a software framework is an abstraction in which software providing generic functionality can be selectively changed by user code, thus providing application specific software. It is a collection of software libraries providing a defined application programming interface (API)."_

    Frameworks are __between the two other approaches__: it's a complete environment for the designers & developers to work with (sending emails, search functionalities, database accesses, ...) but without any frontend or backend built-in nor any business logic: it's leaves it to the developer.

    ## Benefits and drawbacks

    Now let's see the benefits and the drawbacks of each approach:

    ### From scratch

    The developers are __truly the owner__ of their application: they made it themselves from the beginning!  
    But this also means that they have to reinvent the wheel over and over again, since many operations (ie database access) has to be done for each project.  
    It's __time consuming__, and they raise the __risk of bugs__.  
    Also, if they need backup on the project, they have to explain their whole way of thinking to new developers.

    ### CMS / eCommerce platforms

    With those devlopers can have a fully __functional website in minutes__! Wow.  
    And there's a __great community__ behind, with many modules & functionalities, ready to support.

    But then, they have to match the client's requests and expectations and merge them into the existing business logic of the application. Here's were they start to struggle: they have to __tweak the application__ to fit the requirements. And sometimes they can't (budget speaking), and they have to convince their client that what they suggest (what the CMS suggests) is better than what he wants.

    And for the backend part, ther's a bunch of options/links/buttons/functionalities/shortcuts/lists, where the client will most probably use 10% of it. It often scares him and he finally ask the developers to do it themselves "to be sure it'll be done the right way".

    Finally, since it offers many functionalities, it has to take care of all of them, even if you don't use those. I'm not going too into details here but this implies huge performances issues (overcomplicated database data model, many unneeded objects in memory, ...)

    ### Frameworks

    Lying in between, a Framework allows the developer to build the frontend and the backend interface exactly the way the client wants, and this with the advantage of not reinventing the wheel - the Framework contains many libraries to assist him.
    In other words, the developer focuses his development only on the client's business logic.

    And like CMS's, it also provides community support, since the core is open-source and maintained by the community.

    ## False ideas

    We often hear the following remarks, and wanted to share them with you:

    ### CMS's is more affordable: most of my needs are already in it
    For the first phase of the development, that's true. But when it comes to fill the last 10-20% gap between how the client wants his website and the CMS business logic, you quickly catch up and exceed the time needed with Frameworks to reach the final functionality.

    ### CMS's are secure, maintained, and heavily supported
    Maintained and supported, yes. Secure, hum, yes and no. They're secure in the fact that many people is digging into it and could find a security risk, but it's not the case for the external modules the developer will download (and he will download some to meet the requirements).    
    Another point is that if a security breach is found, it's publicly noticed, so the developer has to update his version quickly to avoid exposing himself.

    In the meantime, Frameworks are equally maintained and supported, and most of them have made security audits. Those audits are much more easy to do on Frameworks (libraries of functionalities) than on CMS's (visual code and business logic).

    ### I want a CMS because many other companies do, so it sounds good
    Let's see why they chose it first, see if they're happy with it, and leads us to our little conclusion:

    **If you reached Snowcap to ask for a development, we hope that you don't want the same as your competitor, but that you want something innovative, powerful, and reflecting your business - not reflecting what already exists.**
  publishedAt: '2011-10-14 9:25:01'
  tags: [framework,php,thoughts]